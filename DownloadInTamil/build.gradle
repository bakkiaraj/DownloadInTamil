/* gradle build file for gradle wrapper + Kotlin
* Author: Bakki */

group 'com.saaral'
version '1.0.0'
description "Kotlin Application to downloadsongs from intamil.in - Build with Gradle"

def myAppName = 'DownloadInTamil' // local variable
project.ext.set('javahome', System.env['JAVA_HOME'])

//Dependencies for the gradle build script itself
buildscript {

    //https://kotlinlang.org/docs/reference/using-gradle.html
    ext.kotlin_version = '1.2.41'

    repositories {

        //https://bintray.com/bintray/jcenter
        jcenter()

        //https://search.maven.org/
        //https://mvnrepository.com
        //mavenCentral()

    }
    dependencies {
        // When gradle build needs something to run, Its under classpath
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.+"
    }
}

//Add your plugins of needs
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'org.jetbrains.dokka'

mainClassName = "${project.group}.$myAppName"
defaultTasks 'run'

configurations.all {
    //Gradle will then check for updates every 24 hours as default.
    resolutionStrategy {

        // cache dynamic versions for 10 minutes
        cacheDynamicVersionsFor 10*60, 'seconds'
        // don't cache changing modules at all
        cacheChangingModulesFor 0, 'seconds'
    }

}

/*compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}*/

//https://kotlinlang.org/docs/reference/using-gradle.html
compileKotlin {
    kotlinOptions {
        verbose = true
        jvmTarget= "1.8"
    }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    //main.java.srcDirs += 'src/main/java'

    test.kotlin.srcDirs += 'src/test/kotlin'
}

//Kotlin Doc config
dokka {
    outputFormat = 'html'
    outputDirectory = "${project.buildDir}/javadoc"
}

// In this section you declare where to find the dependencies of your project
repositories {
    //include lib folder
    flatDir { dirs 'dependencies' }

    //Local nexus Repo
    //Note: DO not commit local repo to Git
    /*maven {
        url "http://<host>:8081/nexus/content/groups/public"
    }*/

    // Remote binary repositories to resolve dependencies
    // You can declare any Maven/Ivy/file repository here.

    //jcenter is faster , HTTPS, Superset of mavenCentral, Google Android uses only jcenter
    //https://bintray.com/bintray/jcenter
    jcenter()

    //In case of issues with jcenter(), Enable mavenCentral()
    //https://search.maven.org/
    //https://mvnrepository.com
    mavenCentral()
    //mavenLocal()
}

dependencies {

    implementation  "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation  'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.+' //https://github.com/Kotlin/kotlinx.coroutines , Apache 2.0
    implementation  "org.fusesource.jansi:jansi:1.+"
    implementation  "net.sourceforge.htmlunit:htmlunit:2.+"
    implementation  "commons-io:commons-io:2.+"
    implementation  "commons-cli:commons-cli:1.+"
    implementation  'org.apache.commons:commons-lang3:3.+' //https://commons.apache.org/proper/commons-lang/
}

jar {
    manifest {
        attributes 'Implementation-Version': version,
        //'Class-Path': "libs/"+configurations.compile.collect { it.getName() }.join(" libs/")+" "+configurations.compile.collect { it.getName() }.join(' '),
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': mainClassName
    }
    baseName = myAppName
    classifier = "EXE"
    version = null

    from {
            configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }

}


run {
    doFirst {
        standardInput = System.in
        environment("http_proxy",null)
        environment("https_proxy",null)
    }
    //opt1 is coming from Run configuration of the IDEA , As a -Popt1
    //args = ["--url=http://intamil.in/songs/Katha-Nayagan","--outdir=.","--no-proxy"]
    //args = ["--search='oru naal'","--outdir=c:/temp","--no-proxy"]
}

clean {
    //Config part should be outside
    //Clean IDE build folders
    delete "${project.projectDir}/out" // Delete complete dir
    //Also clean some custom folders, Delete only files from the folder top level only
    delete fileTree(dir: "${project.projectDir}/dependencies", include: '*')
    delete fileTree(dir: "${project.projectDir}/exe", include: '*')

    doLast {
        println "Cleaning Done."
        file("${project.projectDir}/out").mkdirs() //create an empty dir
    }
}



//Custom tasks

//Task to copy all the dependencies in to dependencies folder
task copyDependsLibs(type: Copy,dependsOn:['jar']) {
    //Task type is Copy, following must be in config section

    from {
        configurations.compileClasspath
        configurations.compile
        configurations.runtime
    }
    into "${project.projectDir}/dependencies"

    doLast {
        println("Copying Dependent Libs into ${project.projectDir}/dependencies")
    }
}

//Build and copy the final executable jar into EXE folder
task buildExecutablejar(type: Copy, dependsOn:['copyDependsLibs','jar']) {
    //Task type is Copy and the following must be in config section

    project.tasks.findByName('copyDependsLibs').mustRunAfter('jar') //Explicitly set the order
    from jar //Using gradle's auto wire feature, It will automatically inject the jar name
    into "${project.projectDir}/exe"

    doLast {
        //Task execution section
        println("Copying FAT jar to ${project.projectDir}/exe")

    }
}

//When run this task, Update the Gradle wrapper version
task updateGradleWrapperVersion (type: Wrapper) {
    gradleVersion = '4.7' // From https://services.gradle.org/distributions/
    setDistributionType(Wrapper.DistributionType.ALL) // Use jar and sources package , i.e ALL
}

task listrepos() {
    // Code that goes here is *configuring* the task, and will
    // get evaluated on *every* build invocation, no matter
    // which tasks Gradle eventually decides to execute.
    // Don't do anything time-consuming here.

    doLast {
        // `doLast` adds a so-called *task action* to the task.
        // The code inside the task action(s) defines the task's behavior.
        // It will only get evaluated if and when Gradle decides to
        // execute the task.
        println "List Of Repositories:"
        project.repositories.all { ArtifactRepository repo ->
            print "\n Repo Name : " + repo.name
            if (repo instanceof FlatDirectoryArtifactRepository) {
                print " , Dir: " + repo.dirs
            }
            if (repo instanceof MavenArtifactRepository) { //only for remote repos
                print " , URL: " + repo.url
            }
        }
        println ""
    }
}

// Improving on the previous task declaration, let's now use a *task type*
// (see `type: Exec` below). Task types come with a predefined task action,
// so it's typically not necessary to add one yourself. Also, many task types
// predefine task inputs and outputs, which allows Gradle to check if the task
// is up-to-date. Another advantage of task types is that they allow for
// better tooling support (e.g. auto-completion of task properties).
/*task precompile(type: Exec) {
    // Since this task already has a task action, we only
    // need to configure it.
    commandLine = ["./play1.3.x/play", "precompile"] }
}*/

/**
 TIPS:
 * 1) use --profile with any gradle task for analysing build slowness / profile build steps
 * Ex:
 * gradle buildExecutablejar --profile
 *
 * This generates the .html under build/reports
 *
 * 2)
 */
